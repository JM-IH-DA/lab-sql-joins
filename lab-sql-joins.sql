USE sakila;

-- 1. List the number of films per category:

SELECT c.category_id, c.name AS category, COUNT(fc.film_id) AS film_count
FROM category c
JOIN film_category fc
USING(category_id)
GROUP BY c.category_id, category
ORDER BY film_count DESC;

-- 2. Retrieve the store ID, city, and country for each store.

SELECT s.store_id, c.city, ct.country
FROM store s
LEFT JOIN address a
USING (address_id)
LEFT JOIN city c
USING(city_id)
LEFT JOIN country ct
USING (country_id)
GROUP BY s.store_id
ORDER BY s.store_id ASC;

-- 3. Calculate the total revenue generated by each store in dollars:

SELECT s.store_id, ROUND(SUM(p.amount),2) AS total_revenue
FROM store s
LEFT JOIN customer c
USING(store_id)
LEFT JOIN payment p
USING(customer_id)
GROUP BY s.store_id
ORDER BY total_revenue DESC;

-- 4. Determine the average running time of films for each category:

SELECT c.category_id, c.name AS category, ROUND(AVG(f.length),2) AS average_running_time
FROM category c
JOIN film_category fc
USING(category_id)
JOIN film f
USING(film_id)
GROUP BY c.category_id;

-- Bonus:

-- 5. Identify the film categories with the longest average running time:

SELECT c.category_id, c.name AS category, ROUND(AVG(f.length),2) AS average_running_time
FROM category c
JOIN film_category fc
USING(category_id)
JOIN film f
USING(film_id)
GROUP BY c.category_id
ORDER BY average_running_time DESC;

-- 6. Display the top 10 most frequently rented movies in descending order:

SELECT f.film_id, f.title, COUNT(r.rental_id) AS rental_count
FROM film f
LEFT JOIN inventory i 
USING(film_id)
LEFT JOIN rental r 
USING(inventory_id)
GROUP BY f.film_id, f.title
ORDER BY rental_count DESC
LIMIT 10;


-- 7. Determine if "Academy Dinosaur" can be rented from Store 1:

-- Number of copies in Store 1

SELECT i.store_id, COUNT(*) AS number_of_copies
FROM inventory i
JOIN film f 
ON i.film_id = f.film_id
WHERE f.title = 'ACADEMY DINOSAUR' AND i.store_id = 1;

-- Checking if they are available:

SELECT 
    CASE 
        WHEN i.film_id IS NOT NULL AND (r.rental_id IS NULL OR r.return_date IS NOT NULL) THEN 'Available'
        ELSE 'Not Available'
    END AS rental_status
FROM inventory i
LEFT JOIN rental r 
ON i.inventory_id = r.inventory_id
LEFT JOIN store s 
ON i.store_id = s.store_id
LEFT JOIN film f 
ON i.film_id = f.film_id
WHERE f.title = 'ACADEMY DINOSAUR' AND s.store_id = 1;

-- 8. Provide a list of all distinct film titles, along with their availability status in the inventory. Include a column indicating whether each title is 'Available' or 'NOT available.' Note that there are 42 titles that are not in the inventory, and this information can be obtained using a CASE statement combined with IFNULL."

SELECT
    f.title,
    IFNULL(MAX(availability_status), 'Not Available') AS availability_status
FROM film f
LEFT JOIN (
    SELECT
        f.film_id,
        CASE
            WHEN i.film_id IS NOT NULL THEN 'Available'
            ELSE 'Not Available'
        END AS availability_status
    FROM film f
    LEFT JOIN inventory i ON f.film_id = i.film_id
) AS subquery
ON f.film_id = subquery.film_id
GROUP BY f.title
ORDER BY f.title;

